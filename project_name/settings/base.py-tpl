"""
TODO: DO NOT FORGET TO RENAME gitignore FILE INTO .gitignore

Django settings for {{ project_name }} project.

Generated by 'django-admin startproject' using Django {{ django_version }}.
"""
from json import loads
from os.path import abspath, dirname, join

from django.core.exceptions import ImproperlyConfigured
from django.utils.translation import ugettext_lazy as _

author = 'TODO: YOUR_NAME_HERE'  # optional


def here(*path):
    return join(abspath(dirname(__file__)), *path)


def root_is(*path):
    return join(abspath(PROJECT_ROOT), *path)


PROJECT_ROOT = here("..", "..")
ROOT = root_is
with open(ROOT('{{ project_name }}/settings/secret.json')) as f:
    secrets = loads(f.read())


def get_secret(setting, secret=secrets):
    """Get the secret variable or return explicit exception."""
    try:
        return secret[setting]
    except KeyError:
        error_msg = 'Set the {0} environment variable'.format(setting)
        raise ImproperlyConfigured(error_msg)


PROJECT_NAME = '{{ project_name }}'
ROOT_URLCONF = '{{ project_name }}.urls'
WSGI_APPLICATION = '{{ project_name }}.wsgi.application'
SITE_ID = 1


# APP CONFIGURATION
# used for translation of models inside the db. Must go 1st in list!
# MODELTRANSLATION_APP = ['modeltranslation', ]

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django.contrib.sitemaps'
]

THIRD_PARTY_APPS = [
    'django_jinja',
    # 'easy_thumbnails',
    # 'compressor',
    # 'vimage.apps.VimageConfig',
]

PROJECT_APPS = [
    'dtl_utils.apps.DtlUtilsConfig',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS
# INSTALLED_APPS = (
#     MODELTRANSLATION_APP + DJANGO_APPS + THIRD_PARTY_APPS + PROJECT_APPS
# )

# https://docs.djangoproject.com/en/dev/ref/settings/#middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


# https://docs.djangoproject.com/en/dev/ref/settings/#secret-key
SECRET_KEY = get_secret('SECRET_KEY')

TIME_ZONE = 'Europe/Athens'  # TODO: Maybe change that
LANGUAGE_CODE = 'el'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Paths which include locale directories (used for translation)
LOCALE_PATHS = (
    ROOT('{{ project_name }}/locale'),
)

# Preferred languages of the site
LANGUAGES = (
    ('en', _('English')),
    ('el', _('Greek')),
)


TEMPLATES = [
    {
        'BACKEND': 'django_jinja.backend.Jinja2',
        'DIRS': [
            ROOT('templates/'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            # render with Jinja2 all templates under DIRS that end with .html
            'match_extension': '.html',
            # do not use Jinja2 to render any admin, ckeditor or sitemap pages
            'match_regex': r'^(?!admin|registration|ckeditor|sitemap).*',
            # enable i18n with new style, which means that instead of this
            # (invalid):
            # {% templatetag openvariable %} _('Hello %(w)s!')|format(w='world') {% templatetag closevariable %}
            # we can do this
            # (valid):
            # {% templatetag openvariable %} _('Hello %(w)s!', w='world') {% templatetag closevariable %}
            'newstyle_gettext': True,
            'extensions': [
                'jinja2.ext.i18n',
                'django_jinja.builtins.extensions.CsrfExtension',
                'django_jinja.builtins.extensions.CacheExtension',
                'django_jinja.builtins.extensions.TimezoneExtension',
                'django_jinja.builtins.extensions.UrlsExtension',
                'django_jinja.builtins.extensions.StaticFilesExtension',
                'django_jinja.builtins.extensions.DjangoFiltersExtension',
                # 'compressor.contrib.jinja2ext.CompressorExtension',
            ],
            # [Available settings]
            # github.com/niwinz/django-jinja/blob/master/django_jinja/
            # backend.py#L157
            # [Usage]
            # github.com/niwinz/django-jinja/blob/master/django_jinja/builtins
            # /extensions.py#L99
            'bytecode_cache': {
                'enabled': True
            },
            # values here must be NOT callables, just a simple key:value pair.
            'constants': {
                'SITE_TITLE': _('{{ project_name|capfirst }}'),
            },
            # values here MUST be 'path.to.modules' or 'path.to.functions'.
            'globals': {
                'messages': 'django.contrib.messages.api.get_messages',
                'translation': 'django.utils.translation',
                'settings': 'django.conf.settings',
                'lang_info': '{{ project_name }}.jinja2.methods.lang_info',  # optional
                # 'app_urls': '{{ project_name }}.jinja2.methods.app_urls',  # optional
                # 'thumbnail': '{{ project_name }}.jinja2.methods.thumbnail',  # optional
            },
            # values here MUST be path to a callable (i.e function)
            'filters': {
                'remove_accent': '{{ project_name }}.jinja2.filters.remove_accent',
            },
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': [
            ROOT('templates'),
            ROOT('templates/sitemap')
        ],
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]


MEDIA_URL = '/media/'
MEDIA_ROOT = ROOT('media_root')
STATIC_URL = '/static/'
STATIC_ROOT = ROOT('static_root')
STATICFILES_DIRS = (
    # CSS files
    ('css', ROOT('static/css')),

    # Fonts
    ('fonts', ROOT('static/fonts')),

    # JS files
    ('js', ROOT('static/js')),

    # Images
    ('img', ROOT('static/img')),
)


# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# CRITICAL --> ERROR --> WARNING --> INFO --> DEBUG
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'production_only': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'development_only': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s',
            'datefmt': '%m/%d/%Y %H:%M:%S',
        },
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
            'datefmt': '%m/%d/%Y %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['development_only'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['production_only'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
        'db_logfile': {
            'level': 'WARNING',
            'filters': ['production_only'],
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': ROOT('logs/db.log'),
            'maxBytes': 1024 * 1024,
            'backupCount': 3,
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django.db.backends': {
            'handlers': ['db_logfile'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        # `email` is an explicit logger which will send email to ADMINS,
        # ONLY if the logger inside the module
        # (i.e email_logger = logging.getLogger('email')) will be called
        # with error (i.e email_logger.error(...))
        'email': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False
        },
        # if a log of level INFO (or greater) occurred in the `cart` app,
        # log it in logs/my_apps.log
        # 'cart': {
        #    'handlers': ['my_apps'],
        #    'level': 'INFO',
        # },
        # if a log of level INFO (or greater) occurred in the `info` app,
        # log it in logs/my_apps.log & send emails
        # 'info': {
        #    'handlers': ['my_apps', 'mail_admins'],
        #    'level': 'INFO',
        #    'propagate': False
        # },
    }
}

