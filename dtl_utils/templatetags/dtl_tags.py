import re
from urllib.parse import urlparse

from django import template
from django.utils.html import mark_safe
from django.conf import settings

register = template.Library()

LANG_CODES = [lang[0] for lang in settings.LANGUAGES]
PATTERN = f'^/({"|".join(LANG_CODES)})/'
REGEX = re.compile(PATTERN)
HREF_LANG = '<xhtml:link rel="alternate" hreflang="{hreflang}" href="{href}" />'


# def get_prefix_lang(uri):
#     """
#     Finds and returns the prefixed language code (if any) from the given url.
#     :param str uri: A fully qualified URL incl schema (https://ex.com/statues/)
#     :return: str or None
#     """
#     path = path_pattern(uri)
#     match = REGEX.match(path)
#     if match:
#         return match.group(0).strip("/")


@register.simple_tag()
def sitemap_hreflang_url(uri):
    """
    parse.urlparse extracts to 6 components (https://tools.ietf.org/html/rfc1808.html):

    scheme://   netloc/           path    ;parameters  ?query   #fragment
      |            |               |          |          |          |
    |---|   |--------------|  |----------| |------|  |-------|  |------|
    https://www.example.com   /en/moments/ ;type=a   ?active=1   #go-to

    We want each url (generated by the sitemap) to include itself along with
    other translated versions.
    For example: the url "www.example.com" (el) should include itself along
    with "www.example.com/en/" (en) and the url "www.example.com/en/" (en)
    should include itself along with "www.example.com" (el). This procedure
    should apply to all urls.
    Google's answer:
    support.google.com/webmasters/answer/2620865?hl=en&ref_topic=2370587
    :param str uri: A fully qualified URL incl schema (https://ex.com/statues/)
    :return: string
    """
    parsed_uri = urlparse(uri)
    to_return = []
    for lang_code in LANG_CODES:
        new_path = REGEX.sub(f"/{lang_code}/", parsed_uri.path)
        new_uri = parsed_uri._replace(path=new_path)
        to_return.append(HREF_LANG.format(hreflang=lang_code, href=new_uri.geturl()))

    return mark_safe("\n\t\t".join(to_return))

